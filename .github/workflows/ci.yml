name: Build and test pgcachewatch

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:

  build-and-push:
    strategy:
      fail-fast: false
      matrix:
        postgres-version: ["14", "15", "16"]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg POSTGRES_VERSION=${{ matrix.postgres-version }} \
            -t ghcr.io/janbjorge/pgcachewatchtestdb${{ matrix.postgres-version }}:latest \
            tests/db/
          docker push ghcr.io/janbjorge/pgcachewatchtestdb${{ matrix.postgres-version }}:latest

  ci:
    needs: build-and-push
    services:
      postgres:
        image: ghcr.io/janbjorge/pgcachewatchtestdb${{ matrix.postgres-version }}:latest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        postgres-version: ["14", "15", "16"]
        # os: ["ubuntu-latest"]
        os: ["ubuntu-latest", "windows-latest"]
        # os: ["ubuntu-latest", "windows-latest", "macos-latest"]

    name: PY ${{ matrix.python-version }} on ${{ matrix.os }} using PG ${{ matrix.postgres-version }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pgcachewatch
        shell: bash
        run: |
          pip install pip -U
          pip install .[dev]

      - name: Full test
        shell: bash
        run: pytest -v

  check:
    name: Check test matrix passed.
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: echo "All tests passed; ready to merge."
